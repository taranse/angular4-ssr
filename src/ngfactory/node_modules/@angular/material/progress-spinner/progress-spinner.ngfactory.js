/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/progress-spinner/progress-spinner';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from './progress-spinner.css.shim.ngstyle';
var MdProgressSpinnerModuleInjector = (function (_super) {
    __extends(MdProgressSpinnerModuleInjector, _super);
    function MdProgressSpinnerModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    MdProgressSpinnerModuleInjector.prototype.createInternal = function () {
        this._CompatibilityModule_0 = new import2.CompatibilityModule();
        this._MdProgressSpinnerModule_1 = new import1.MdProgressSpinnerModule();
        return this._MdProgressSpinnerModule_1;
    };
    MdProgressSpinnerModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CompatibilityModule)) {
            return this._CompatibilityModule_0;
        }
        if ((token === import1.MdProgressSpinnerModule)) {
            return this._MdProgressSpinnerModule_1;
        }
        return notFoundResult;
    };
    MdProgressSpinnerModuleInjector.prototype.destroyInternal = function () {
    };
    return MdProgressSpinnerModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdProgressSpinnerModuleNgFactory = new import0.NgModuleFactory(MdProgressSpinnerModuleInjector, import1.MdProgressSpinnerModule);
var styles_MdProgressSpinner = [import3.styles];
export var RenderType_MdProgressSpinner = import0.ɵcrt({
    encapsulation: 0,
    styles: styles_MdProgressSpinner,
    data: {}
});
export function View_MdProgressSpinner_0(l) {
    return import0.ɵvid(2, [
        (l()(), import0.ɵeld(0, null, null, 1, ':svg:svg', [
            [
                'preserveAspectRatio',
                'xMidYMid meet'
            ],
            [
                'viewBox',
                '0 0 100 100'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, ':svg:path', [], null, null, null, null, null))
    ], null, null);
}
function View_MdProgressSpinner_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'md-progress-spinner', [[
                'role',
                'progressbar'
            ]
        ], [
            [
                1,
                'aria-valuemin',
                0
            ],
            [
                1,
                'aria-valuemax',
                0
            ],
            [
                1,
                'aria-valuenow',
                0
            ],
            [
                1,
                'mode',
                0
            ]
        ], null, null, View_MdProgressSpinner_0, RenderType_MdProgressSpinner)),
        import0.ɵdid(90112, null, 0, import1.MdProgressSpinner, [
            import0.NgZone,
            import0.ElementRef,
            import0.Renderer
        ], null, null)
    ], null, function (ck, v) {
        var currVal_0 = import0.ɵnov(v, 1)._ariaValueMin;
        var currVal_1 = import0.ɵnov(v, 1)._ariaValueMax;
        var currVal_2 = import0.ɵnov(v, 1).value;
        var currVal_3 = import0.ɵnov(v, 1).mode;
        ck(v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3);
    });
}
export var MdProgressSpinnerNgFactory = import0.ɵccf('md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle', import1.MdProgressSpinner, View_MdProgressSpinner_Host_0, {
    color: 'color',
    value: 'value',
    mode: 'mode'
}, {}, []);
var styles_MdSpinner = [import3.styles];
export var RenderType_MdSpinner = import0.ɵcrt({
    encapsulation: 0,
    styles: styles_MdSpinner,
    data: {}
});
export function View_MdSpinner_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, ':svg:svg', [
            [
                'preserveAspectRatio',
                'xMidYMid meet'
            ],
            [
                'viewBox',
                '0 0 100 100'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, ':svg:path', [], null, null, null, null, null))
    ], null, null);
}
function View_MdSpinner_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'md-spinner', [
            [
                'mode',
                'indeterminate'
            ],
            [
                'role',
                'progressbar'
            ]
        ], [
            [
                2,
                'mat-spinner',
                null
            ],
            [
                1,
                'aria-valuenow',
                0
            ],
            [
                1,
                'mode',
                0
            ]
        ], null, null, View_MdSpinner_0, RenderType_MdSpinner)),
        import0.ɵdid(90112, null, 0, import1.MdSpinner, [
            import0.ElementRef,
            import0.NgZone,
            import0.Renderer
        ], null, null)
    ], null, function (ck, v) {
        var currVal_0 = true;
        var currVal_1 = import0.ɵnov(v, 1).value;
        var currVal_2 = import0.ɵnov(v, 1).mode;
        ck(v, 0, 0, currVal_0, currVal_1, currVal_2);
    });
}
export var MdSpinnerNgFactory = import0.ɵccf('md-spinner, mat-spinner', import1.MdSpinner, View_MdSpinner_Host_0, {
    color: 'color',
    value: 'value',
    mode: 'mode'
}, {}, []);
