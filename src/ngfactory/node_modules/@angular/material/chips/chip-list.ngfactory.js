/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/chips/chip-list';
import * as import2 from './chips.css.ngstyle';
var MdChipsModuleInjector = (function (_super) {
    __extends(MdChipsModuleInjector, _super);
    function MdChipsModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    MdChipsModuleInjector.prototype.createInternal = function () {
        this._MdChipsModule_0 = new import1.MdChipsModule();
        return this._MdChipsModule_0;
    };
    MdChipsModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.MdChipsModule)) {
            return this._MdChipsModule_0;
        }
        return notFoundResult;
    };
    MdChipsModuleInjector.prototype.destroyInternal = function () {
    };
    return MdChipsModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdChipsModuleNgFactory = new import0.NgModuleFactory(MdChipsModuleInjector, import1.MdChipsModule);
var styles_MdChipList = [import2.styles];
export var RenderType_MdChipList = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_MdChipList,
    data: {}
});
export function View_MdChipList_0(l) {
    return import0.ɵvid(2, [
        (l()(), import0.ɵeld(0, null, null, 1, 'div', [[
                'class',
                'md-chip-list-wrapper'
            ]
        ], null, null, null, null, null)),
        import0.ɵncd(null, 0)
    ], null, null);
}
function View_MdChipList_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 2, 'md-chip-list', [
            [
                'role',
                'listbox'
            ],
            [
                'tabindex',
                '0'
            ]
        ], [[
                2,
                'mat-chip-list',
                null
            ]
        ], [
            [
                null,
                'focus'
            ],
            [
                null,
                'keydown'
            ]
        ], function (v, en, $event) {
            var ad = true;
            if (('focus' === en)) {
                var pd_0 = (import0.ɵnov(v, 1).focus() !== false);
                ad = (pd_0 && ad);
            }
            if (('keydown' === en)) {
                var pd_1 = (import0.ɵnov(v, 1)._keydown($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_MdChipList_0, RenderType_MdChipList)),
        import0.ɵdid(548864, null, 1, import1.MdChipList, [import0.ElementRef], null, null),
        import0.ɵqud(301989888, 1, { chips: 1 })
    ], null, function (ck, v) {
        var currVal_0 = true;
        ck(v, 0, 0, currVal_0);
    });
}
export var MdChipListNgFactory = import0.ɵccf('md-chip-list, mat-chip-list', import1.MdChipList, View_MdChipList_Host_0, { selectable: 'selectable' }, {}, ['*']);
