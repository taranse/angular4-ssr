/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/core/ripple/ripple';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import4 from '@angular/material/core/overlay/position/viewport-ruler';
var MdRippleModuleInjector = (function (_super) {
    __extends(MdRippleModuleInjector, _super);
    function MdRippleModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    Object.defineProperty(MdRippleModuleInjector.prototype, "_ScrollDispatcher_2", {
        get: function () {
            if ((this.__ScrollDispatcher_2 == null)) {
                (this.__ScrollDispatcher_2 = import3.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import3.ScrollDispatcher, null)));
            }
            return this.__ScrollDispatcher_2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdRippleModuleInjector.prototype, "_ViewportRuler_3", {
        get: function () {
            if ((this.__ViewportRuler_3 == null)) {
                (this.__ViewportRuler_3 = import4.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import4.ViewportRuler, null), this._ScrollDispatcher_2));
            }
            return this.__ViewportRuler_3;
        },
        enumerable: true,
        configurable: true
    });
    MdRippleModuleInjector.prototype.createInternal = function () {
        this._CompatibilityModule_0 = new import2.CompatibilityModule();
        this._MdRippleModule_1 = new import1.MdRippleModule();
        return this._MdRippleModule_1;
    };
    MdRippleModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CompatibilityModule)) {
            return this._CompatibilityModule_0;
        }
        if ((token === import1.MdRippleModule)) {
            return this._MdRippleModule_1;
        }
        if ((token === import3.ScrollDispatcher)) {
            return this._ScrollDispatcher_2;
        }
        if ((token === import4.ViewportRuler)) {
            return this._ViewportRuler_3;
        }
        return notFoundResult;
    };
    MdRippleModuleInjector.prototype.destroyInternal = function () {
    };
    return MdRippleModuleInjector;
}(import0.ÉµNgModuleInjector));
export var MdRippleModuleNgFactory = new import0.NgModuleFactory(MdRippleModuleInjector, import1.MdRippleModule);
