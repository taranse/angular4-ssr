/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/checkbox/checkbox';
import * as import2 from '@angular/common';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/material/core/ripple/ripple';
import * as import5 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import6 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import7 from './checkbox.css.ngstyle';
import * as import8 from '@angular/forms';
var MdCheckboxModuleInjector = (function (_super) {
    __extends(MdCheckboxModuleInjector, _super);
    function MdCheckboxModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    Object.defineProperty(MdCheckboxModuleInjector.prototype, "_NgLocalization_4", {
        get: function () {
            if ((this.__NgLocalization_4 == null)) {
                (this.__NgLocalization_4 = new import2.NgLocaleLocalization(this.parent.get(import0.LOCALE_ID)));
            }
            return this.__NgLocalization_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCheckboxModuleInjector.prototype, "_ScrollDispatcher_5", {
        get: function () {
            if ((this.__ScrollDispatcher_5 == null)) {
                (this.__ScrollDispatcher_5 = import5.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import5.ScrollDispatcher, null)));
            }
            return this.__ScrollDispatcher_5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCheckboxModuleInjector.prototype, "_ViewportRuler_6", {
        get: function () {
            if ((this.__ViewportRuler_6 == null)) {
                (this.__ViewportRuler_6 = import6.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import6.ViewportRuler, null), this._ScrollDispatcher_5));
            }
            return this.__ViewportRuler_6;
        },
        enumerable: true,
        configurable: true
    });
    MdCheckboxModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._CompatibilityModule_1 = new import3.CompatibilityModule();
        this._MdRippleModule_2 = new import4.MdRippleModule();
        this._MdCheckboxModule_3 = new import1.MdCheckboxModule();
        return this._MdCheckboxModule_3;
    };
    MdCheckboxModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.CompatibilityModule)) {
            return this._CompatibilityModule_1;
        }
        if ((token === import4.MdRippleModule)) {
            return this._MdRippleModule_2;
        }
        if ((token === import1.MdCheckboxModule)) {
            return this._MdCheckboxModule_3;
        }
        if ((token === import2.NgLocalization)) {
            return this._NgLocalization_4;
        }
        if ((token === import5.ScrollDispatcher)) {
            return this._ScrollDispatcher_5;
        }
        if ((token === import6.ViewportRuler)) {
            return this._ViewportRuler_6;
        }
        return notFoundResult;
    };
    MdCheckboxModuleInjector.prototype.destroyInternal = function () {
    };
    return MdCheckboxModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdCheckboxModuleNgFactory = new import0.NgModuleFactory(MdCheckboxModuleInjector, import1.MdCheckboxModule);
var styles_MdCheckbox = [import7.styles];
export var RenderType_MdCheckbox = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_MdCheckbox,
    data: {}
});
function View_MdCheckbox_1(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'div', [
            [
                'class',
                'mat-checkbox-ripple'
            ],
            [
                'md-ripple',
                ''
            ]
        ], [
            [
                2,
                'mat-ripple',
                null
            ],
            [
                2,
                'mat-ripple-unbounded',
                null
            ]
        ], null, null, null, null)),
        import0.ɵdid(335872, null, 0, import4.MdRipple, [
            import0.ElementRef,
            import0.NgZone,
            import6.ViewportRuler
        ], {
            trigger: [
                0,
                'trigger'
            ],
            centered: [
                1,
                'centered'
            ],
            speedFactor: [
                2,
                'speedFactor'
            ]
        }, null)
    ], function (ck, v) {
        var co = v.component;
        var currVal_2 = co._getHostElement();
        var currVal_3 = true;
        var currVal_4 = 0.3;
        ck(v, 1, 0, currVal_2, currVal_3, currVal_4);
    }, function (ck, v) {
        var currVal_0 = true;
        var currVal_1 = import0.ɵnov(v, 1).unbounded;
        ck(v, 0, 0, currVal_0, currVal_1);
    });
}
export function View_MdCheckbox_0(l) {
    return import0.ɵvid(2, [
        import0.ɵqud(201326592, 1, { _inputElement: 0 }),
        (l()(), import0.ɵeld(0, null, null, 11, 'label', [[
                'class',
                'mat-checkbox-layout'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 8, 'div', [[
                'class',
                'mat-checkbox-inner-container'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, [
            [
                1,
                0
            ],
            [
                'input',
                1
            ]
        ], null, 0, 'input', [
            [
                'class',
                'mat-checkbox-input cdk-visually-hidden'
            ],
            [
                'type',
                'checkbox'
            ]
        ], [
            [
                8,
                'id',
                0
            ],
            [
                8,
                'required',
                0
            ],
            [
                8,
                'checked',
                0
            ],
            [
                8,
                'disabled',
                0
            ],
            [
                8,
                'name',
                0
            ],
            [
                8,
                'tabIndex',
                0
            ],
            [
                8,
                'indeterminate',
                0
            ],
            [
                1,
                'aria-label',
                0
            ],
            [
                1,
                'aria-labelledby',
                0
            ]
        ], [
            [
                null,
                'focus'
            ],
            [
                null,
                'blur'
            ],
            [
                null,
                'change'
            ],
            [
                null,
                'click'
            ]
        ], function (v, en, $event) {
            var ad = true;
            var co = v.component;
            if (('focus' === en)) {
                var pd_0 = (co._onInputFocus() !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (co._onInputBlur() !== false);
                ad = (pd_1 && ad);
            }
            if (('change' === en)) {
                var pd_2 = (co._onInteractionEvent($event) !== false);
                ad = (pd_2 && ad);
            }
            if (('click' === en)) {
                var pd_3 = (co._onInputClick($event) !== false);
                ad = (pd_3 && ad);
            }
            return ad;
        }, null, null)),
        (l()(), import0.ɵand(8388608, null, null, 1, null, View_MdCheckbox_1)),
        import0.ɵdid(8192, null, 0, import2.NgIf, [
            import0.ViewContainerRef,
            import0.TemplateRef
        ], { ngIf: [
                0,
                'ngIf'
            ]
        }, null),
        (l()(), import0.ɵeld(0, null, null, 0, 'div', [[
                'class',
                'mat-checkbox-frame'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 3, 'div', [[
                'class',
                'mat-checkbox-background'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 1, ':svg:svg', [
            [
                ':xml:space',
                'preserve'
            ],
            [
                'class',
                'mat-checkbox-checkmark'
            ],
            [
                'version',
                '1.1'
            ],
            [
                'viewBox',
                '0 0 24 24'
            ],
            [
                'xmlns',
                'http://www.w3.org/2000/svg'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, ':svg:path', [
            [
                'class',
                'mat-checkbox-checkmark-path'
            ],
            [
                'd',
                'M4.1,12.7 9,17.6 20.3,6.3'
            ],
            [
                'fill',
                'none'
            ],
            [
                'stroke',
                'white'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, 'div', [[
                'class',
                'mat-checkbox-mixedmark'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 1, 'span', [[
                'class',
                'mat-checkbox-label'
            ]
        ], null, null, null, null, null)),
        import0.ɵncd(null, 0)
    ], function (ck, v) {
        var co = v.component;
        var currVal_9 = !co._isRippleDisabled();
        ck(v, 5, 0, currVal_9);
    }, function (ck, v) {
        var co = v.component;
        var currVal_0 = co.inputId;
        var currVal_1 = co.required;
        var currVal_2 = co.checked;
        var currVal_3 = co.disabled;
        var currVal_4 = co.name;
        var currVal_5 = co.tabIndex;
        var currVal_6 = co.indeterminate;
        var currVal_7 = co.ariaLabel;
        var currVal_8 = co.ariaLabelledby;
        ck(v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8);
    });
}
function View_MdCheckbox_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 2, 'md-checkbox', [], [
            [
                2,
                'mat-checkbox',
                null
            ],
            [
                2,
                'mat-checkbox-indeterminate',
                null
            ],
            [
                2,
                'mat-checkbox-checked',
                null
            ],
            [
                2,
                'mat-checkbox-disabled',
                null
            ],
            [
                2,
                'mat-checkbox-label-before',
                null
            ],
            [
                2,
                'mat-checkbox-focused',
                null
            ]
        ], null, null, View_MdCheckbox_0, RenderType_MdCheckbox)),
        import0.ɵdid(24576, null, 0, import1.MdCheckbox, [
            import0.Renderer,
            import0.ElementRef,
            import0.ChangeDetectorRef
        ], null, null),
        import0.ɵprd(2560, null, import8.NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [import1.MdCheckbox])
    ], null, function (ck, v) {
        var currVal_0 = true;
        var currVal_1 = import0.ɵnov(v, 1).indeterminate;
        var currVal_2 = import0.ɵnov(v, 1).checked;
        var currVal_3 = import0.ɵnov(v, 1).disabled;
        var currVal_4 = (import0.ɵnov(v, 1).labelPosition == 'before');
        var currVal_5 = import0.ɵnov(v, 1)._hasFocus;
        ck(v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
    });
}
export var MdCheckboxNgFactory = import0.ɵccf('md-checkbox, mat-checkbox', import1.MdCheckbox, View_MdCheckbox_Host_0, {
    ariaLabel: 'aria-label',
    ariaLabelledby: 'aria-labelledby',
    id: 'id',
    disableRipple: 'disableRipple',
    required: 'required',
    align: 'align',
    labelPosition: 'labelPosition',
    disabled: 'disabled',
    tabIndex: 'tabIndex',
    name: 'name',
    checked: 'checked',
    indeterminate: 'indeterminate',
    color: 'color'
}, {
    change: 'change',
    indeterminateChange: 'indeterminateChange'
}, ['*']);
