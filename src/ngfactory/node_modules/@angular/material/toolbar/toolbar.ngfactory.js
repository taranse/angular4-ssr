/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/toolbar/toolbar';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from './toolbar.css.ngstyle';
var MdToolbarModuleInjector = (function (_super) {
    __extends(MdToolbarModuleInjector, _super);
    function MdToolbarModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    MdToolbarModuleInjector.prototype.createInternal = function () {
        this._CompatibilityModule_0 = new import2.CompatibilityModule();
        this._MdToolbarModule_1 = new import1.MdToolbarModule();
        return this._MdToolbarModule_1;
    };
    MdToolbarModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CompatibilityModule)) {
            return this._CompatibilityModule_0;
        }
        if ((token === import1.MdToolbarModule)) {
            return this._MdToolbarModule_1;
        }
        return notFoundResult;
    };
    MdToolbarModuleInjector.prototype.destroyInternal = function () {
    };
    return MdToolbarModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdToolbarModuleNgFactory = new import0.NgModuleFactory(MdToolbarModuleInjector, import1.MdToolbarModule);
var styles_MdToolbar = [import3.styles];
export var RenderType_MdToolbar = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_MdToolbar,
    data: {}
});
export function View_MdToolbar_0(l) {
    return import0.ɵvid(2, [
        (l()(), import0.ɵeld(0, null, null, 4, 'div', [[
                'class',
                'mat-toolbar-layout'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 2, 'md-toolbar-row', [], [[
                2,
                'mat-toolbar-row',
                null
            ]
        ], null, null, null, null)),
        import0.ɵdid(8192, null, 0, import1.MdToolbarRow, [], null, null),
        import0.ɵncd(null, 0),
        import0.ɵncd(null, 1)
    ], null, function (ck, v) {
        var currVal_0 = true;
        ck(v, 1, 0, currVal_0);
    });
}
function View_MdToolbar_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'md-toolbar', [[
                'role',
                'toolbar'
            ]
        ], [[
                2,
                'mat-toolbar',
                null
            ]
        ], null, null, View_MdToolbar_0, RenderType_MdToolbar)),
        import0.ɵdid(24576, null, 0, import1.MdToolbar, [
            import0.ElementRef,
            import0.Renderer
        ], null, null)
    ], null, function (ck, v) {
        var currVal_0 = true;
        ck(v, 0, 0, currVal_0);
    });
}
export var MdToolbarNgFactory = import0.ɵccf('md-toolbar, mat-toolbar', import1.MdToolbar, View_MdToolbar_Host_0, { color: 'color' }, {}, [
    '*',
    'md-toolbar-row, mat-toolbar-row'
]);
