/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/icon/icon';
import * as import2 from '@angular/http';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/material/icon/icon-registry';
import * as import5 from '@angular/platform-browser';
import * as import6 from './icon.css.ngstyle';
var MdIconModuleInjector = (function (_super) {
    __extends(MdIconModuleInjector, _super);
    function MdIconModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    Object.defineProperty(MdIconModuleInjector.prototype, "_BrowserXhr_3", {
        get: function () {
            if ((this.__BrowserXhr_3 == null)) {
                (this.__BrowserXhr_3 = new import2.BrowserXhr());
            }
            return this.__BrowserXhr_3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_ResponseOptions_4", {
        get: function () {
            if ((this.__ResponseOptions_4 == null)) {
                (this.__ResponseOptions_4 = new import2.BaseResponseOptions());
            }
            return this.__ResponseOptions_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XSRFStrategy_5", {
        get: function () {
            if ((this.__XSRFStrategy_5 == null)) {
                (this.__XSRFStrategy_5 = import2.ɵb());
            }
            return this.__XSRFStrategy_5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XHRBackend_6", {
        get: function () {
            if ((this.__XHRBackend_6 == null)) {
                (this.__XHRBackend_6 = new import2.XHRBackend(this._BrowserXhr_3, this._ResponseOptions_4, this._XSRFStrategy_5));
            }
            return this.__XHRBackend_6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_RequestOptions_7", {
        get: function () {
            if ((this.__RequestOptions_7 == null)) {
                (this.__RequestOptions_7 = new import2.BaseRequestOptions());
            }
            return this.__RequestOptions_7;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_Http_8", {
        get: function () {
            if ((this.__Http_8 == null)) {
                (this.__Http_8 = import2.ɵc(this._XHRBackend_6, this._RequestOptions_7));
            }
            return this.__Http_8;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_MdIconRegistry_9", {
        get: function () {
            if ((this.__MdIconRegistry_9 == null)) {
                (this.__MdIconRegistry_9 = import1.ICON_REGISTRY_PROVIDER_FACTORY(this.parent.get(import4.MdIconRegistry, null), this._Http_8, this.parent.get(import5.DomSanitizer)));
            }
            return this.__MdIconRegistry_9;
        },
        enumerable: true,
        configurable: true
    });
    MdIconModuleInjector.prototype.createInternal = function () {
        this._HttpModule_0 = new import2.HttpModule();
        this._CompatibilityModule_1 = new import3.CompatibilityModule();
        this._MdIconModule_2 = new import1.MdIconModule();
        return this._MdIconModule_2;
    };
    MdIconModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.HttpModule)) {
            return this._HttpModule_0;
        }
        if ((token === import3.CompatibilityModule)) {
            return this._CompatibilityModule_1;
        }
        if ((token === import1.MdIconModule)) {
            return this._MdIconModule_2;
        }
        if ((token === import2.BrowserXhr)) {
            return this._BrowserXhr_3;
        }
        if ((token === import2.ResponseOptions)) {
            return this._ResponseOptions_4;
        }
        if ((token === import2.XSRFStrategy)) {
            return this._XSRFStrategy_5;
        }
        if ((token === import2.XHRBackend)) {
            return this._XHRBackend_6;
        }
        if ((token === import2.RequestOptions)) {
            return this._RequestOptions_7;
        }
        if ((token === import2.Http)) {
            return this._Http_8;
        }
        if ((token === import4.MdIconRegistry)) {
            return this._MdIconRegistry_9;
        }
        return notFoundResult;
    };
    MdIconModuleInjector.prototype.destroyInternal = function () {
    };
    return MdIconModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdIconModuleNgFactory = new import0.NgModuleFactory(MdIconModuleInjector, import1.MdIconModule);
var styles_MdIcon = [import6.styles];
export var RenderType_MdIcon = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_MdIcon,
    data: {}
});
export function View_MdIcon_0(l) {
    return import0.ɵvid(2, [import0.ɵncd(null, 0)], null, null);
}
function View_MdIcon_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'md-icon', [[
                'role',
                'img'
            ]
        ], [[
                2,
                'mat-icon',
                null
            ]
        ], null, null, View_MdIcon_0, RenderType_MdIcon)),
        import0.ɵdid(4513792, null, 0, import1.MdIcon, [
            import0.ElementRef,
            import0.Renderer,
            import4.MdIconRegistry
        ], null, null)
    ], function (ck, v) {
        ck(v, 1, 0);
    }, function (ck, v) {
        var currVal_0 = true;
        ck(v, 0, 0, currVal_0);
    });
}
export var MdIconNgFactory = import0.ɵccf('md-icon, mat-icon', import1.MdIcon, View_MdIcon_Host_0, {
    svgIcon: 'svgIcon',
    fontSet: 'fontSet',
    fontIcon: 'fontIcon',
    alt: 'alt',
    hostAriaLabel: 'aria-label',
    color: 'color'
}, {}, ['*']);
