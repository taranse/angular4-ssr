/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '@angular/material/slide-toggle/slide-toggle';
import * as import2 from '@angular/forms';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/material/core/gestures/gesture-config';
import * as import5 from '@angular/platform-browser';
import * as import6 from './slide-toggle.css.ngstyle';
var MdSlideToggleModuleInjector = (function (_super) {
    __extends(MdSlideToggleModuleInjector, _super);
    function MdSlideToggleModuleInjector(parent) {
        return _super.call(this, parent, [], []) || this;
    }
    Object.defineProperty(MdSlideToggleModuleInjector.prototype, "_\u0275i_4", {
        get: function () {
            if ((this.__ɵi_4 == null)) {
                (this.__ɵi_4 = new import2.ɵi());
            }
            return this.__ɵi_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdSlideToggleModuleInjector.prototype, "_HAMMER_GESTURE_CONFIG_5", {
        get: function () {
            if ((this.__HAMMER_GESTURE_CONFIG_5 == null)) {
                (this.__HAMMER_GESTURE_CONFIG_5 = new import4.GestureConfig());
            }
            return this.__HAMMER_GESTURE_CONFIG_5;
        },
        enumerable: true,
        configurable: true
    });
    MdSlideToggleModuleInjector.prototype.createInternal = function () {
        this._ɵba_0 = new import2.ɵba();
        this._FormsModule_1 = new import2.FormsModule();
        this._CompatibilityModule_2 = new import3.CompatibilityModule();
        this._MdSlideToggleModule_3 = new import1.MdSlideToggleModule();
        return this._MdSlideToggleModule_3;
    };
    MdSlideToggleModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.ɵba)) {
            return this._ɵba_0;
        }
        if ((token === import2.FormsModule)) {
            return this._FormsModule_1;
        }
        if ((token === import3.CompatibilityModule)) {
            return this._CompatibilityModule_2;
        }
        if ((token === import1.MdSlideToggleModule)) {
            return this._MdSlideToggleModule_3;
        }
        if ((token === import2.ɵi)) {
            return this._ɵi_4;
        }
        if ((token === import5.HAMMER_GESTURE_CONFIG)) {
            return this._HAMMER_GESTURE_CONFIG_5;
        }
        return notFoundResult;
    };
    MdSlideToggleModuleInjector.prototype.destroyInternal = function () {
    };
    return MdSlideToggleModuleInjector;
}(import0.ɵNgModuleInjector));
export var MdSlideToggleModuleNgFactory = new import0.NgModuleFactory(MdSlideToggleModuleInjector, import1.MdSlideToggleModule);
var styles_MdSlideToggle = [import6.styles];
export var RenderType_MdSlideToggle = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_MdSlideToggle,
    data: {}
});
export function View_MdSlideToggle_0(l) {
    return import0.ɵvid(2, [
        import0.ɵqud(201326592, 1, { _inputElement: 0 }),
        (l()(), import0.ɵeld(0, null, null, 8, 'label', [[
                'class',
                'mat-slide-toggle-label'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 5, 'div', [[
                'class',
                'mat-slide-toggle-container'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, 'div', [[
                'class',
                'mat-slide-toggle-bar'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 2, 'div', [[
                'class',
                'mat-slide-toggle-thumb-container'
            ]
        ], null, [
            [
                null,
                'slidestart'
            ],
            [
                null,
                'slide'
            ],
            [
                null,
                'slideend'
            ]
        ], function (v, en, $event) {
            var ad = true;
            var co = v.component;
            if (('slidestart' === en)) {
                var pd_0 = (co._onDragStart() !== false);
                ad = (pd_0 && ad);
            }
            if (('slide' === en)) {
                var pd_1 = (co._onDrag($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('slideend' === en)) {
                var pd_2 = (co._onDragEnd() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, null, null)),
        (l()(), import0.ɵeld(0, null, null, 1, 'div', [[
                'class',
                'mat-slide-toggle-thumb'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, null, null, 0, 'div', [[
                'class',
                'mat-ink-ripple'
            ]
        ], null, null, null, null, null)),
        (l()(), import0.ɵeld(0, [
            [
                1,
                0
            ],
            [
                'input',
                1
            ]
        ], null, 0, 'input', [
            [
                'class',
                'mat-slide-toggle-input cdk-visually-hidden'
            ],
            [
                'type',
                'checkbox'
            ]
        ], [
            [
                8,
                'id',
                0
            ],
            [
                8,
                'required',
                0
            ],
            [
                8,
                'tabIndex',
                0
            ],
            [
                8,
                'checked',
                0
            ],
            [
                8,
                'disabled',
                0
            ],
            [
                1,
                'name',
                0
            ],
            [
                1,
                'aria-label',
                0
            ],
            [
                1,
                'aria-labelledby',
                0
            ]
        ], [
            [
                null,
                'blur'
            ],
            [
                null,
                'focus'
            ],
            [
                null,
                'change'
            ],
            [
                null,
                'click'
            ]
        ], function (v, en, $event) {
            var ad = true;
            var co = v.component;
            if (('blur' === en)) {
                var pd_0 = (co._onInputBlur() !== false);
                ad = (pd_0 && ad);
            }
            if (('focus' === en)) {
                var pd_1 = (co._onInputFocus() !== false);
                ad = (pd_1 && ad);
            }
            if (('change' === en)) {
                var pd_2 = (co._onChangeEvent($event) !== false);
                ad = (pd_2 && ad);
            }
            if (('click' === en)) {
                var pd_3 = (co._onInputClick($event) !== false);
                ad = (pd_3 && ad);
            }
            return ad;
        }, null, null)),
        (l()(), import0.ɵeld(0, null, null, 1, 'span', [[
                'class',
                'mat-slide-toggle-content'
            ]
        ], null, null, null, null, null)),
        import0.ɵncd(null, 0)
    ], null, function (ck, v) {
        var co = v.component;
        var currVal_0 = co.inputId;
        var currVal_1 = co.required;
        var currVal_2 = co.tabIndex;
        var currVal_3 = co.checked;
        var currVal_4 = co.disabled;
        var currVal_5 = co.name;
        var currVal_6 = co.ariaLabel;
        var currVal_7 = co.ariaLabelledby;
        ck(v, 7, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7);
    });
}
function View_MdSlideToggle_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 2, 'md-slide-toggle', [], [
            [
                2,
                'mat-slide-toggle',
                null
            ],
            [
                2,
                'mat-checked',
                null
            ],
            [
                2,
                'mat-disabled',
                null
            ],
            [
                2,
                'mat-slide-toggle-focused',
                null
            ],
            [
                2,
                'mat-slide-toggle-label-before',
                null
            ]
        ], [[
                null,
                'mousedown'
            ]
        ], function (v, en, $event) {
            var ad = true;
            if (('mousedown' === en)) {
                var pd_0 = (import0.ɵnov(v, 1)._setMousedown() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_MdSlideToggle_0, RenderType_MdSlideToggle)),
        import0.ɵdid(548864, null, 0, import1.MdSlideToggle, [
            import0.ElementRef,
            import0.Renderer
        ], null, null),
        import0.ɵprd(2560, null, import2.NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [import1.MdSlideToggle])
    ], null, function (ck, v) {
        var currVal_0 = true;
        var currVal_1 = import0.ɵnov(v, 1).checked;
        var currVal_2 = import0.ɵnov(v, 1).disabled;
        var currVal_3 = import0.ɵnov(v, 1)._hasFocus;
        var currVal_4 = (import0.ɵnov(v, 1).labelPosition == 'before');
        ck(v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
    });
}
export var MdSlideToggleNgFactory = import0.ɵccf('md-slide-toggle, mat-slide-toggle', import1.MdSlideToggle, View_MdSlideToggle_Host_0, {
    name: 'name',
    id: 'id',
    tabIndex: 'tabIndex',
    labelPosition: 'labelPosition',
    ariaLabel: 'aria-label',
    ariaLabelledby: 'aria-labelledby',
    disabled: 'disabled',
    required: 'required',
    checked: 'checked',
    color: 'color'
}, { change: 'change' }, ['*']);
