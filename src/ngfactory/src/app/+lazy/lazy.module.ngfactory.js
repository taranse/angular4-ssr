/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '@angular/core';
import * as import1 from '../../../../app/+lazy/lazy.module';
import * as import2 from '@angular/router';
var LazyModuleInjector = (function (_super) {
    __extends(LazyModuleInjector, _super);
    function LazyModuleInjector(parent) {
        return _super.call(this, parent, [LazyViewNgFactory], []) || this;
    }
    LazyModuleInjector.prototype.createInternal = function () {
        this._RouterModule_0 = new import2.RouterModule(this.parent.get(import2.ɵa, null), this.parent.get(import2.Router, null));
        this._LazyModule_1 = new import1.LazyModule();
        this._ROUTES_2 = [[{
                    path: '',
                    component: import1.LazyView,
                    pathMatch: 'full'
                }
            ]];
        return this._LazyModule_1;
    };
    LazyModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.RouterModule)) {
            return this._RouterModule_0;
        }
        if ((token === import1.LazyModule)) {
            return this._LazyModule_1;
        }
        if ((token === import2.ROUTES)) {
            return this._ROUTES_2;
        }
        return notFoundResult;
    };
    LazyModuleInjector.prototype.destroyInternal = function () {
    };
    return LazyModuleInjector;
}(import0.ɵNgModuleInjector));
export var LazyModuleNgFactory = new import0.NgModuleFactory(LazyModuleInjector, import1.LazyModule);
var styles_LazyView = [];
export var RenderType_LazyView = import0.ɵcrt({
    encapsulation: 2,
    styles: styles_LazyView,
    data: {}
});
export function View_LazyView_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'h3', [], null, null, null, null, null)),
        (l()(), import0.ɵted(null, ['i\'m lazy']))
    ], null, null);
}
function View_LazyView_Host_0(l) {
    return import0.ɵvid(0, [
        (l()(), import0.ɵeld(0, null, null, 1, 'lazy-view', [], null, null, null, View_LazyView_0, RenderType_LazyView)),
        import0.ɵdid(24576, null, 0, import1.LazyView, [], null, null)
    ], null, null);
}
export var LazyViewNgFactory = import0.ɵccf('lazy-view', import1.LazyView, View_LazyView_Host_0, {}, {}, []);
